<button
    class="@(Tw.Merge("peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input", Class))"
    type="button"
    role="switch"
    data-checked="@Checked"
    data-state="@(Checked ? "checked" : "unchecked")"
    @onclick="@Toggle"
    @attributes="@AdditionalAttributes">
    <span data-state="@(Checked ? "checked" : "unchecked")"
          @onclick="@Toggle"
          class="pointer-events-none block size-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"></span>
</button>
<input hidden @bind="@Checked" valuechanged="@CheckedChanged" />

@code {
    [Parameter]
    public string Class { get; set; } = null!;

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = [];

    private async Task Toggle()
    {
        Checked = !Checked;
        await CheckedChanged.InvokeAsync(Checked);
    }
}