@using System.ComponentModel.DataAnnotations

@if (Href is not null)
{
    <a class="@GetButtonClass(Tw, Variant, Size, Class)"
       href="@Href"
       @attributes="@AdditionalAttributes">
        @ChildContent
    </a>
}
else
{
    <button class="@GetButtonClass(Tw, Variant, Size, Class)"
            href="@Href"
            @attributes="@AdditionalAttributes">
        @ChildContent
    </button>
}


@code {
    public const string BaseClass =
        "ring-offset-background focus-visible:ring-ring focus-visible:ring-ring-1 inline-flex items-center justify-center gap-2 " +
        "whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none " +
        "focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 " +
        "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow-sm";

    public static string GetButtonClass(TwMerge tw, string variant = "default", string size = "sm", string? @class = null)
    {
        var v = variant switch
        {
            "default" => "bg-primary text-primary-foreground hover:bg-primary/90",
            "destructive" => "bg-destructive text-destructive-foreground hover:bg-destructive/90",
            "outline" => "border-input bg-background hover:bg-accent hover:text-accent-foreground border",
            "secondary" => "bg-secondary text-secondary-foreground hover:bg-secondary/80",
            "ghost" => "hover:bg-accent hover:text-accent-foreground",
            "link" => "text-primary underline-offset-4 hover:underline",
            _ => throw new ArgumentException("Invalid variant", nameof(Variant)),
        };

        var s = size switch
        {
            "sm" => "h-9 rounded-md px-3",
            "md" => "h-10 px-4 py-2",
            "lg" => "h-11 rounded-md px-8",
            "icon" => "size-10",
            _ => throw new ArgumentException("Invalid size", nameof(Size)),
        };

        return tw.Merge(BaseClass, v, s, @class) ?? BaseClass;
    }

    [Parameter]
    public string Class { get; set; } = null!;

    [Parameter]
    [AllowedValues("default", "destructive", "outline", "secondary", "ghost", "link")]
    public string Variant { get; set; } = "default";

    [Parameter]
    [AllowedValues("sm", "md", "lg", "icon")]
    public string Size { get; set; } = "sm";

    [Parameter]
    public string? Href { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = [];
}